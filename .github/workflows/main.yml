name: Main tests

on:
  push:
    branches: "**"
  pull_request:
    branches: "**"

permissions:
  contents: read

env:
  LOCAL_PORT: ${{ 8080 }}
  DB_HOST: '127.0.0.1'
  DB_USER: 'poster_generator'
  DB_NAME: 'poster_generator'
  DB_PASS: 'password'
  DB_PORT: ${{ 3800 }}

jobs:
  main-tests:
    permissions:
      contents: write

    environment: Production

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Cleanup Docker Environment
      run: |
        docker-compose down -v || true
      # docker system prune -a --volumes -f || true

    - name: prepare cache environment
      run: |
        mkdir -p $HOME/cache
        mkdir -p ~/cache/.docker

    - name: Cache Packages
      id: apt-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/cache/.docker
        key: all-packages-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml', 'Dockerfile', 'docker-compose.yml', 'docker.sh') }}
        restore-keys: |
          all-packages-${{ runner.os }}-

    - name: Install dependencies
      if: steps.apt-cache.outputs.cache-hit != 'true'
      run: |
        docker pull mariadb:latest
        docker save -o $HOME/cache/.docker/mariadb.tar mariadb:latest

    - name: install check
      run: |
        ls -a $HOME/cache
        ls -a $HOME/cache/.docker

    - name: load Docker images
      run: |
        if [ -f "$HOME/cache/.docker/mariadb.tar" ]; then
          docker load -i $HOME/cache/.docker/mariadb.tar
        fi
        if [ -f "$HOME/cache/.docker/poster_generator.tar" ]; then
          docker load -i $HOME/cache/.docker/poster_generator.tar
        fi

    - uses: getong/mariadb-action@v1.11
      with:
        host port: ${{ env.DB_PORT }}
        container port: 3307
        character set server: 'utf8'
        collation server: 'utf8_general_ci'
        mariadb version: 'latest'
        mysql database: ${{ env.DB_NAME }}
        mysql root password: ${{ env.DB_PASS }}
        mysql user: ${{ env.DB_USER }}
        mysql password: ${{ env.DB_PASS }}

    - name: Run test script
      continue-on-error: false
      run: |
        bash docker.sh --local-port ${{ env.LOCAL_PORT }} --run-tests | tee -a "$GITHUB_STEP_SUMMARY"

    - name: Save poster_generator image
      run: |
        docker build -t scientific_poster_generator_poster_generator .
        docker save -o $HOME/cache/.docker/poster_generator.tar scientific_poster_generator_poster_generator

    - name: Create a new version
      if: ${{ success() }}
      run: |
        echo "Creating new version"
        git tag ${{ github.run_number }} || true
        git push origin --tags || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: tests/test_report.json

    - name: Archive Changed Database After Tests
      uses: actions/upload-artifact@v4
      with:
        name: store-post-test-sql
        path: |
          ./tests/results_backend_test.sql
          ./tests/results_frontend_test.sql

  todo-to-issue:
    runs-on: "ubuntu-latest"
    environment: Production
    permissions:
      issues: write
    steps:
      - uses: "actions/checkout@v4"
      - name: "TODO to Issue"
        uses: "alstr/todo-to-issue-action@v5"
        with:
          CLOSE_ISSUES: "true"
