name: Main tests

on:
  push:
    branches: "**"
  pull_request:
    branches: "**"

permissions:
  contents: read

env:
  LOCAL_PORT: ${{ 8080 }}
  DB_HOST: '127.0.0.1'
  DB_USER: 'poster_generator'
  DB_NAME: 'poster_generator'
  DB_PASS: 'password'
  DB_PORT: ${{ 3800 }}

jobs:
  main-tests:
    permissions:
      contents: write

    environment: Production

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # - name: Grant folder permissions
    #   run: |
    #     sudo chmod a+rwX /var/cache/apt/archives
    #     ls -ld /var/cache/apt/archives

    - name: prepare cache environment
      run: |
        mkdir -p $HOME/cache

        mkdir -p $HOME/cache/.apt
        sudo chmod -R 777 $HOME/cache/.apt

        echo $USER
        echo "Ownership:"
        sudo ls -ld  $HOME/cache/.apt


        mkdir -p $HOME/cache/.pip
        pip config set global.cache-dir $HOME/cache/.pip
        echo "[global]" > $HOME/.config/pip/pip.conf
        echo "target = $HOME/cache/.pip" >> $HOME/.config/pip/pip.conf
        echo "PYTHONPATH=$HOME/cache/.pip" >> $GITHUB_ENV


        mkdir -p ~/cache/.driver

        mkdir -p ~/cache/.docker
      # echo 'Dir::Cache::archives "/home/runner/cache/.apt";' | sudo tee /etc/apt/apt.conf.d/99custom-cache


    - name: Cache Packages
      id: apt-cache
      uses: actions/cache@v4
      with:
        path: |
          ~/cache/.apt
          ~/cache/.pip
          ~/cache/.driver
          ~/cache/.docker
        key: all-packages-${{ runner.os }}-${{ hashFiles('.github/workflows/main.yml') }}
        restore-keys: |
          all-packages-${{ runner.os }}-

    - name: install apt
      run: |
        sudo apt update && apt install -y mariadb-client wget python3 python3-pip python3-venv
        sudo apt-get update && apt-get install -y firefox-esr libdbus-glib-1-2 libgtk-3-0 libasound2 libx11-xcb1 libdbus-1-3 libxss1 libnss3 libxcomposite1 libxcursor1 libxdamage1 libxrandr2 libgbm1 xauth x11-xserver-utils xvfb && rm -rf /var/lib/apt/lists/*

    - name: Install dependencies
      if: steps.apt-cache.outputs.cache-hit != 'true'
      run: |
        tests/requirements.txt /tmp/requirements.txt
        python3 -m venv /venv && /venv/bin/pip install --upgrade pip && /venv/bin/pip install -r /tmp/requirements.txt

        GECKO_VERSION=$(curl -s https://api.github.com/repos/mozilla/geckodriver/releases/latest | grep -o '"tag_name":"[^"]*"' | sed 's/"tag_name":"//;s/"$//')
        echo $GECKO_VERSION
        echo -----
        [[ $GECKO_VERSION='' ]] && GECKO_VERSION='v0.36.0'
        echo $GECKO_VERSION
        wget https://github.com/mozilla/geckodriver/releases/download/$GECKO_VERSION/geckodriver-v$GECKO_VERSION-linux64.tar.gz && \
        tar -xzf geckodriver-${GECKO_VERSION}-linux64.tar.gz && \
        chmod +x geckodriver && \
        sudo mv geckodriver /usr/local/bin/ && \
        sudo rm geckodriver-${GECKO_VERSION}-linux64.tar.gz

        echo -------------------------------apt
        ls -la $HOME/cache/.apt
        echo -------------------------------pip
        ls -la $HOME/cache/.pip
        echo -------------------------------driver
        ls -la $HOME/cache/.driver/geckodriver

        docker pull mariadb:latest
        docker save -o $HOME/cache/.docker/image.tar mariadb:latest

    - name: install check
      run: |
        pip show mypy
        pip show selenium

        echo ---------
        sudo apt-config dump | grep Dir::Cache::archives
        echo ---------

        whereis firefox
        whereis geckodriver
        whereis mariadb
        whereis mariadb-server
        dpkg -l | grep mariadb-server
        echo ---
        sudo mariadb -e "SHOW DATABASES;"

        echo -----------------------------------------------------------cache

        ls -a $HOME/cache

        echo -----------------------------------------------------------apt

        ls -a $HOME/cache/.apt

        echo -----------------------------------------------------------

      # ls -ld $HOME/cache/.apt
      # ls -ld $HOME/cache/.apt/partial
      # ls -ld $HOME/cache/.apt/lock


    - name: Debug directories
      run: |
        echo "APT cache contents:"
        ls -la $HOME/cache/.apt
        echo "Pip cache contents:"
        ls -la $HOME/cache/.pip
        echo "Driver cache contents:"
        ls -la $HOME/cache/.driver
        echo "Docker cache contents:"
        ls -la $HOME/cache/.docker


    - name: apt log
      run: |
        cat /var/log/apt/history.log

    - name: Grand folder permissions 2
      run: |
        sudo chmod +x /home
        sudo chmod +x /home/runner
        sudo chmod +x /home/runner/work
        echo ##########################
        sudo chown -R www-data:www-data /home/runner/work/scientific_poster_generator/scientific_poster_generator
        sudo chmod -R 777 /home/runner/work/scientific_poster_generator/scientific_poster_generator
        echo ##########################
        sudo chmod -R 777 $HOME/cache/.apt
        pwd
        ls -l
        echo ######################
        ls -l /home/runner/work/scientific_poster_generator/scientific_poster_generator

    - name: load docker image
      run: |
        docker load -i $HOME/cache/.docker/image.tar

    - uses: getong/mariadb-action@v1.11
      with:
        host port: ${{ env.DB_PORT }}
        container port: 3307
        character set server: 'utf8'
        collation server: 'utf8_general_ci'
        mariadb version: 'latest'
        mysql database: ${{ env.DB_NAME }}
        mysql root password: ${{ env.DB_PASS }}
        mysql user: ${{ env.DB_USER }}
        mysql password: ${{ env.DB_PASS }}

    - name: Manage Server
      run: |
        ls /etc/apache2/mods-available
        sudo a2enmod php8.3
        sudo systemctl start apache2
        sleep 5
        echo ##########################
        netstat -tuln
        echo ##########################
        ps aux | grep apache2
        echo ##########################
        sed -i -E "s|<VirtualHost \*:[0-9]+>|<VirtualHost *:${LOCAL_PORT}>|" custom-000-default.conf
        sed -i -E "s|Listen [0-9]+|Listen ${LOCAL_PORT}|" custom-ports.conf
        cp custom-000-default.conf /etc/apache2/sites-enabled/000-default.conf
        cp custom-ports.conf /etc/apache2/ports.conf
        echo ##########################
        bash -c "echo 'ServerName localhost' >> /etc/apache2/apache2.conf"
        sudo a2enmod rewrite
        sudo systemctl apachectl graceful

    - name: Check Apache status
      run: |
        sudo systemctl status apache2
        sudo netstat -tulpn | grep apache

    - name: Run test script
      continue-on-error: false
      run: |
        curl -v http://${{ env.DB_HOST }}:${{ env.LOCAL_PORT }}/login.php
        echo ##########################
        sleep 3
        ./tests/test_env >> $GITHUB_STEP_SUMMARY

    - name: Server Log
      if: ${{ always() }}
      run: |
        echo ##########################error
        sudo cat /var/log/apache2/error.log
        echo ##########################other_vhosts_access
        sudo cat /var/log/apache2/other_vhosts_access.log

    - name: Create a new version
      if: ${{ success() }}
      run: |
        echo "Creating new version"
        git tag ${{ github.run_number }} || true
        git push origin --tags || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Archive code coverage results
      uses: actions/upload-artifact@v4
      with:
        name: code-coverage-report
        path: tests/test_report.json

    - name: Archive Changed Database After Tests
      uses: actions/upload-artifact@v4
      with:
        name: store-post-test-sql
        path: |
          ./tests/results_backend_test.sql
          ./tests/results_frontend_test.sql

  todo-to-issue:
    runs-on: "ubuntu-latest"
    environment: Production
    permissions:
      issues: write
    steps:
      - uses: "actions/checkout@v4"
      - name: "TODO to Issue"
        uses: "alstr/todo-to-issue-action@v5"
        with:
          CLOSE_ISSUES: "true"
