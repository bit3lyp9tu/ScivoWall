#!/bin/bash

# Standardwerte
LOCAL_HOST=127.0.0.1
LOCAL_PORT=1112
DB_HOST="localhost"

# Hilfe-Funktion
function show_help {
  echo "Usage: $0 [--db_port PORT] [--db_host HOST] [--help]"
  echo
  echo "Optionen:"
  echo "  --db_port PORT   Setzt den LOCAL_PORT (Standard: 1112)"
  echo "  --db_host HOST   Setzt den DB_HOST (Standard: localhost)"
  echo "  --help           Zeigt diese Hilfe an und beendet"
  exit 0
}

# CLI-Parameter parsen
while [[ $# -gt 0 ]]; do
  case $1 in
    --db_port)
      LOCAL_PORT="$2"
      shift 2
      ;;
    --db_host)
      DB_HOST="$2"
      shift 2
      ;;
    --help)
      show_help
      ;;
    *)
      echo "Unbekannter Parameter: $1"
      echo "Nutze --help fÃ¼r Hilfe."
      exit 1
      ;;
  esac
done

# Exportieren
export LOCAL_HOST
export LOCAL_PORT
export DB_HOST

if [[ -n $DB_NAME ]]; then
	DB_NAME="$DB_NAME"
else
	DB_NAME="db"
fi

python_version=$(python3 --version | sed -e 's#Python ##')
VENV_DIR=$HOME/.poster_generator_test_suite_$python_version

base_dir="./"

requirements="${base_dir}requirements.txt"

docker_run="docker.sh"

if [[ ! -e $docker_run ]]; then
	docker_run="../docker.sh"
fi

if [[ ! -e $requirements ]]; then
	base_dir="tests/"
	requirements="${base_dir}requirements.txt"
fi

if ! [[ -e $requirements ]]; then
	echo "$requirements not found"
	exit 1
fi

bash $docker_run --local-port $LOCAL_PORT

if ! command -v python3 2>/dev/null >/dev/null; then
	echo "python3 not found"
	exit 1
fi

if [[ "$GITHUB_ACTIONS" != "true" ]]; then
	requirements_hash=$(cat $requirements | md5sum | sed -e 's#\s.*##')
	create_venv=0

	if ! [[ -d $VENV_DIR ]]; then
		create_venv=1
	fi

	if ! [[ -e "$VENV_DIR/hash" ]]; then
		create_venv=1
	fi

	if [[ $create_venv -eq 1 ]]; then
		python3 -mvenv $VENV_DIR
	fi

	source $VENV_DIR/bin/activate

	venv_hash=$(cat "$VENV_DIR/hash" 2>/dev/null)

	if [[ $venv_hash != $requirements_hash ]]; then
		for install_me in $(cat $requirements); do
			pip install $install_me
		done

		echo "$requirements_hash" > "$VENV_DIR/hash"
	fi

	echo Running Locally
else
	echo Running On GitHub Actions
fi

# sudo /etc/init.d/apache2 restart
# export DB_NAME=$DB_NAME

echo Running Frontend-Tests...

echo Run tests on Test-DB: ${DB_NAME}

if [[ -z $DB_PORT ]]; then
	DB_PORT=3800
fi

if [[ "$GITHUB_ACTIONS" != "true" ]]; then
	# TODO:   doesnt seem to work correctly (local db poster_generator gets edited)
	sudo mariadb -e "DROP DATABASE IF EXISTS ${DB_NAME};"
	sudo mariadb -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME};"
	sudo mariadb $DB_NAME < $base_dir/test_config2.sql
	sudo mariadb $DB_NAME < $base_dir/test_img.sql
	sudo mariadb -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO 'poster_generator'@'%' IDENTIFIED BY 'password'; FLUSH PRIVILEGES;"
else
	mariadb -h ${LOCAL_HOST} -P $DB_PORT -u root -ppassword -e 'GRANT ALL PRIVILEGES ON *.* TO "poster_generator"@"%" IDENTIFIED BY "password"; FLUSH PRIVILEGES;'
	mariadb -h ${LOCAL_HOST} -P $DB_PORT -u poster_generator -ppassword -e "DROP DATABASE IF EXISTS ${DB_NAME};"
	mariadb -h ${LOCAL_HOST} -P $DB_PORT -u poster_generator -ppassword -e "CREATE DATABASE IF NOT EXISTS ${DB_NAME};"
	mariadb -h ${LOCAL_HOST} -P $DB_PORT -u poster_generator -ppassword $DB_NAME < $base_dir/test_config2.sql
	mariadb -h ${LOCAL_HOST} -P $DB_PORT -u poster_generator -ppassword $DB_NAME < $base_dir/test_img.sql
fi

/venv/bin/python /var/www/html/tests/poster_tests.py
CODE=$?
#  $*

if [[ "$GITHUB_ACTIONS" != "true" ]]; then
	sudo mariadb-dump $DB_NAME > ./results_frontend_test.sql
	sudo mariadb -e "DROP DATABASE ${DB_NAME};"

	sudo mariadb -e "CREATE DATABASE IF NOT EXISTS poster_generator;"
	sudo mariadb poster_generator < $base_dir/test_config2.sql
	sudo mariadb poster_generator < $base_dir/test_img.sql
else
	mariadb-dump -h ${LOCAL_HOST} -P $DB_PORT -u poster_generator -ppassword $DB_NAME > $base_dir/results_frontend_test.sql
	mariadb -h ${LOCAL_HOST} -P $DB_PORT -u poster_generator -ppassword -e "DROP DATABASE ${DB_NAME};"
fi

# coverage run -p poster_tests.py
# coverage combine
# coverage report

echo End Frontend-Tests

exit $CODE
